name: Deploy to AWS S3 and CloudFront

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump (major, minor, patch)'
        required: true
        default: 'patch'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: CI=false pnpm run build

      - name: Determine version bump type
        id: version_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            case "${{ github.event.inputs.version_type }}" in
              major|minor|patch)
                echo "version_type=${{ github.event.inputs.version_type }}" >> $GITHUB_ENV
                ;;
              *)
                echo "Invalid version type specified: ${{ github.event.inputs.version_type }}"
                exit 1
                ;;
            esac
          else
            version_type=$(node ./scripts/determine-version-type.js)
            echo "value=${version_type}" >> $GITHUB_ENV
          fi

      - name: Bump version
        id: new_version
        run: |
          node ./scripts/bump-version.js ${{ steps.version_type.outputs.value }}

      - name: Configure Git
        run: |
          git config --global user.name ${{ secrets.USER_NAME }}
          git config --global user.email ${{ secrets.USER_EMAIL }}
          git remote set-url origin https://x-access-token:${{ secrets.USER_PAT }}@github.com/${{ github.repository }}

      - name: Commit version bump
        id: commit_version
        run: |
          git add package.json
          git commit -m "chore(release): bump version"
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=${NEW_VERSION}" >> $GITHUB_ENV
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.USER_PAT }}

      - name: Create tag
        id: create_tag
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          git tag -a "v${NEW_VERSION}" -m "Release version ${NEW_VERSION}"
          git push origin --tags
        env:
          GITHUB_TOKEN: ${{ secrets.USER_PAT }}

      - name: Generate release notes
        run: |
          chmod +x ./scripts/generate-release-note.sh
          ./scripts/generate-release-note.sh

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.commit_version.outputs.new_version }}
          release_name: Release v${{ steps.commit_version.outputs.new_version }}
          body_path: ./release-notes.md
          draft: false
          prerelease: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy to S3
        run: aws s3 sync --region ap-northeast-2 ./packages/website/dist/ ${{ secrets.AWS_SECRET_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_SECRET_DISTRIBUTION_ID }} --paths "/*"
